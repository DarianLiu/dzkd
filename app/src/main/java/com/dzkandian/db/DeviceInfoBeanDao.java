package com.dzkandian.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.dzkandian.storage.bean.DeviceInfoBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "DEVICE_INFO_BEAN".
*/
public class DeviceInfoBeanDao extends AbstractDao<DeviceInfoBean, Long> {

    public static final String TABLENAME = "DEVICE_INFO_BEAN";

    /**
     * Properties of entity DeviceInfoBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Level = new Property(1, Integer.class, "level", false, "LEVEL");
        public final static Property NewsActivity = new Property(2, Integer.class, "newsActivity", false, "NEWS_ACTIVITY");
        public final static Property NewsMessage = new Property(3, Integer.class, "newsMessage", false, "NEWS_MESSAGE");
        public final static Property NewsArticle = new Property(4, Integer.class, "newsArticle", false, "NEWS_ARTICLE");
        public final static Property ReadGoldCircles = new Property(5, Integer.class, "readGoldCircles", false, "READ_GOLD_CIRCLES");
        public final static Property VideoGoldCircles = new Property(6, Integer.class, "videoGoldCircles", false, "VIDEO_GOLD_CIRCLES");
        public final static Property MaxSameTouchAreaCount = new Property(7, Integer.class, "maxSameTouchAreaCount", false, "MAX_SAME_TOUCH_AREA_COUNT");
        public final static Property IndexPop = new Property(8, Integer.class, "indexPop", false, "INDEX_POP");
        public final static Property IndexPopAttachData = new Property(9, String.class, "indexPopAttachData", false, "INDEX_POP_ATTACH_DATA");
        public final static Property IndexPopActivityPic = new Property(10, String.class, "indexPopActivityPic", false, "INDEX_POP_ACTIVITY_PIC");
        public final static Property IndexPopActivityEvent = new Property(11, String.class, "indexPopActivityEvent", false, "INDEX_POP_ACTIVITY_EVENT");
        public final static Property IndexPopActivityHour = new Property(12, Integer.class, "indexPopActivityHour", false, "INDEX_POP_ACTIVITY_HOUR");
        public final static Property IndexActivityIconUrl = new Property(13, String.class, "indexActivityIconUrl", false, "INDEX_ACTIVITY_ICON_URL");
        public final static Property IndexActivityIconPic = new Property(14, String.class, "indexActivityIconPic", false, "INDEX_ACTIVITY_ICON_PIC");
        public final static Property RiskDdeviceNname = new Property(15, String.class, "riskDdeviceNname", false, "RISK_DDEVICE_NNAME");
        public final static Property HasApprentice = new Property(16, Integer.class, "hasApprentice", false, "HAS_APPRENTICE");
        public final static Property FinishNoviceTask = new Property(17, Integer.class, "finishNoviceTask", false, "FINISH_NOVICE_TASK");
        public final static Property TodaySign = new Property(18, Integer.class, "todaySign", false, "TODAY_SIGN");
        public final static Property GotoInvitationPic = new Property(19, String.class, "gotoInvitationPic", false, "GOTO_INVITATION_PIC");
        public final static Property GotoSignPic = new Property(20, String.class, "gotoSignPic", false, "GOTO_SIGN_PIC");
        public final static Property GotoTaskCenterPic = new Property(21, String.class, "gotoTaskCenterPic", false, "GOTO_TASK_CENTER_PIC");
        public final static Property WeixinPayAppid = new Property(22, String.class, "weixinPayAppid", false, "WEIXIN_PAY_APPID");
        public final static Property ReadGoldPercent = new Property(23, Integer.class, "readGoldPercent", false, "READ_GOLD_PERCENT");
        public final static Property VideoGoldPercent = new Property(24, Integer.class, "videoGoldPercent", false, "VIDEO_GOLD_PERCENT");
    }


    public DeviceInfoBeanDao(DaoConfig config) {
        super(config);
    }
    
    public DeviceInfoBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"DEVICE_INFO_BEAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"LEVEL\" INTEGER," + // 1: level
                "\"NEWS_ACTIVITY\" INTEGER," + // 2: newsActivity
                "\"NEWS_MESSAGE\" INTEGER," + // 3: newsMessage
                "\"NEWS_ARTICLE\" INTEGER," + // 4: newsArticle
                "\"READ_GOLD_CIRCLES\" INTEGER," + // 5: readGoldCircles
                "\"VIDEO_GOLD_CIRCLES\" INTEGER," + // 6: videoGoldCircles
                "\"MAX_SAME_TOUCH_AREA_COUNT\" INTEGER," + // 7: maxSameTouchAreaCount
                "\"INDEX_POP\" INTEGER," + // 8: indexPop
                "\"INDEX_POP_ATTACH_DATA\" TEXT," + // 9: indexPopAttachData
                "\"INDEX_POP_ACTIVITY_PIC\" TEXT," + // 10: indexPopActivityPic
                "\"INDEX_POP_ACTIVITY_EVENT\" TEXT," + // 11: indexPopActivityEvent
                "\"INDEX_POP_ACTIVITY_HOUR\" INTEGER," + // 12: indexPopActivityHour
                "\"INDEX_ACTIVITY_ICON_URL\" TEXT," + // 13: indexActivityIconUrl
                "\"INDEX_ACTIVITY_ICON_PIC\" TEXT," + // 14: indexActivityIconPic
                "\"RISK_DDEVICE_NNAME\" TEXT," + // 15: riskDdeviceNname
                "\"HAS_APPRENTICE\" INTEGER," + // 16: hasApprentice
                "\"FINISH_NOVICE_TASK\" INTEGER," + // 17: finishNoviceTask
                "\"TODAY_SIGN\" INTEGER," + // 18: todaySign
                "\"GOTO_INVITATION_PIC\" TEXT," + // 19: gotoInvitationPic
                "\"GOTO_SIGN_PIC\" TEXT," + // 20: gotoSignPic
                "\"GOTO_TASK_CENTER_PIC\" TEXT," + // 21: gotoTaskCenterPic
                "\"WEIXIN_PAY_APPID\" TEXT," + // 22: weixinPayAppid
                "\"READ_GOLD_PERCENT\" INTEGER," + // 23: readGoldPercent
                "\"VIDEO_GOLD_PERCENT\" INTEGER);"); // 24: videoGoldPercent
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"DEVICE_INFO_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, DeviceInfoBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Integer level = entity.getLevel();
        if (level != null) {
            stmt.bindLong(2, level);
        }
 
        Integer newsActivity = entity.getNewsActivity();
        if (newsActivity != null) {
            stmt.bindLong(3, newsActivity);
        }
 
        Integer newsMessage = entity.getNewsMessage();
        if (newsMessage != null) {
            stmt.bindLong(4, newsMessage);
        }
 
        Integer newsArticle = entity.getNewsArticle();
        if (newsArticle != null) {
            stmt.bindLong(5, newsArticle);
        }
 
        Integer readGoldCircles = entity.getReadGoldCircles();
        if (readGoldCircles != null) {
            stmt.bindLong(6, readGoldCircles);
        }
 
        Integer videoGoldCircles = entity.getVideoGoldCircles();
        if (videoGoldCircles != null) {
            stmt.bindLong(7, videoGoldCircles);
        }
 
        Integer maxSameTouchAreaCount = entity.getMaxSameTouchAreaCount();
        if (maxSameTouchAreaCount != null) {
            stmt.bindLong(8, maxSameTouchAreaCount);
        }
 
        Integer indexPop = entity.getIndexPop();
        if (indexPop != null) {
            stmt.bindLong(9, indexPop);
        }
 
        String indexPopAttachData = entity.getIndexPopAttachData();
        if (indexPopAttachData != null) {
            stmt.bindString(10, indexPopAttachData);
        }
 
        String indexPopActivityPic = entity.getIndexPopActivityPic();
        if (indexPopActivityPic != null) {
            stmt.bindString(11, indexPopActivityPic);
        }
 
        String indexPopActivityEvent = entity.getIndexPopActivityEvent();
        if (indexPopActivityEvent != null) {
            stmt.bindString(12, indexPopActivityEvent);
        }
 
        Integer indexPopActivityHour = entity.getIndexPopActivityHour();
        if (indexPopActivityHour != null) {
            stmt.bindLong(13, indexPopActivityHour);
        }
 
        String indexActivityIconUrl = entity.getIndexActivityIconUrl();
        if (indexActivityIconUrl != null) {
            stmt.bindString(14, indexActivityIconUrl);
        }
 
        String indexActivityIconPic = entity.getIndexActivityIconPic();
        if (indexActivityIconPic != null) {
            stmt.bindString(15, indexActivityIconPic);
        }
 
        String riskDdeviceNname = entity.getRiskDdeviceNname();
        if (riskDdeviceNname != null) {
            stmt.bindString(16, riskDdeviceNname);
        }
 
        Integer hasApprentice = entity.getHasApprentice();
        if (hasApprentice != null) {
            stmt.bindLong(17, hasApprentice);
        }
 
        Integer finishNoviceTask = entity.getFinishNoviceTask();
        if (finishNoviceTask != null) {
            stmt.bindLong(18, finishNoviceTask);
        }
 
        Integer todaySign = entity.getTodaySign();
        if (todaySign != null) {
            stmt.bindLong(19, todaySign);
        }
 
        String gotoInvitationPic = entity.getGotoInvitationPic();
        if (gotoInvitationPic != null) {
            stmt.bindString(20, gotoInvitationPic);
        }
 
        String gotoSignPic = entity.getGotoSignPic();
        if (gotoSignPic != null) {
            stmt.bindString(21, gotoSignPic);
        }
 
        String gotoTaskCenterPic = entity.getGotoTaskCenterPic();
        if (gotoTaskCenterPic != null) {
            stmt.bindString(22, gotoTaskCenterPic);
        }
 
        String weixinPayAppid = entity.getWeixinPayAppid();
        if (weixinPayAppid != null) {
            stmt.bindString(23, weixinPayAppid);
        }
 
        Integer readGoldPercent = entity.getReadGoldPercent();
        if (readGoldPercent != null) {
            stmt.bindLong(24, readGoldPercent);
        }
 
        Integer videoGoldPercent = entity.getVideoGoldPercent();
        if (videoGoldPercent != null) {
            stmt.bindLong(25, videoGoldPercent);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, DeviceInfoBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Integer level = entity.getLevel();
        if (level != null) {
            stmt.bindLong(2, level);
        }
 
        Integer newsActivity = entity.getNewsActivity();
        if (newsActivity != null) {
            stmt.bindLong(3, newsActivity);
        }
 
        Integer newsMessage = entity.getNewsMessage();
        if (newsMessage != null) {
            stmt.bindLong(4, newsMessage);
        }
 
        Integer newsArticle = entity.getNewsArticle();
        if (newsArticle != null) {
            stmt.bindLong(5, newsArticle);
        }
 
        Integer readGoldCircles = entity.getReadGoldCircles();
        if (readGoldCircles != null) {
            stmt.bindLong(6, readGoldCircles);
        }
 
        Integer videoGoldCircles = entity.getVideoGoldCircles();
        if (videoGoldCircles != null) {
            stmt.bindLong(7, videoGoldCircles);
        }
 
        Integer maxSameTouchAreaCount = entity.getMaxSameTouchAreaCount();
        if (maxSameTouchAreaCount != null) {
            stmt.bindLong(8, maxSameTouchAreaCount);
        }
 
        Integer indexPop = entity.getIndexPop();
        if (indexPop != null) {
            stmt.bindLong(9, indexPop);
        }
 
        String indexPopAttachData = entity.getIndexPopAttachData();
        if (indexPopAttachData != null) {
            stmt.bindString(10, indexPopAttachData);
        }
 
        String indexPopActivityPic = entity.getIndexPopActivityPic();
        if (indexPopActivityPic != null) {
            stmt.bindString(11, indexPopActivityPic);
        }
 
        String indexPopActivityEvent = entity.getIndexPopActivityEvent();
        if (indexPopActivityEvent != null) {
            stmt.bindString(12, indexPopActivityEvent);
        }
 
        Integer indexPopActivityHour = entity.getIndexPopActivityHour();
        if (indexPopActivityHour != null) {
            stmt.bindLong(13, indexPopActivityHour);
        }
 
        String indexActivityIconUrl = entity.getIndexActivityIconUrl();
        if (indexActivityIconUrl != null) {
            stmt.bindString(14, indexActivityIconUrl);
        }
 
        String indexActivityIconPic = entity.getIndexActivityIconPic();
        if (indexActivityIconPic != null) {
            stmt.bindString(15, indexActivityIconPic);
        }
 
        String riskDdeviceNname = entity.getRiskDdeviceNname();
        if (riskDdeviceNname != null) {
            stmt.bindString(16, riskDdeviceNname);
        }
 
        Integer hasApprentice = entity.getHasApprentice();
        if (hasApprentice != null) {
            stmt.bindLong(17, hasApprentice);
        }
 
        Integer finishNoviceTask = entity.getFinishNoviceTask();
        if (finishNoviceTask != null) {
            stmt.bindLong(18, finishNoviceTask);
        }
 
        Integer todaySign = entity.getTodaySign();
        if (todaySign != null) {
            stmt.bindLong(19, todaySign);
        }
 
        String gotoInvitationPic = entity.getGotoInvitationPic();
        if (gotoInvitationPic != null) {
            stmt.bindString(20, gotoInvitationPic);
        }
 
        String gotoSignPic = entity.getGotoSignPic();
        if (gotoSignPic != null) {
            stmt.bindString(21, gotoSignPic);
        }
 
        String gotoTaskCenterPic = entity.getGotoTaskCenterPic();
        if (gotoTaskCenterPic != null) {
            stmt.bindString(22, gotoTaskCenterPic);
        }
 
        String weixinPayAppid = entity.getWeixinPayAppid();
        if (weixinPayAppid != null) {
            stmt.bindString(23, weixinPayAppid);
        }
 
        Integer readGoldPercent = entity.getReadGoldPercent();
        if (readGoldPercent != null) {
            stmt.bindLong(24, readGoldPercent);
        }
 
        Integer videoGoldPercent = entity.getVideoGoldPercent();
        if (videoGoldPercent != null) {
            stmt.bindLong(25, videoGoldPercent);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public DeviceInfoBean readEntity(Cursor cursor, int offset) {
        DeviceInfoBean entity = new DeviceInfoBean( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1), // level
            cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2), // newsActivity
            cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3), // newsMessage
            cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4), // newsArticle
            cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5), // readGoldCircles
            cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6), // videoGoldCircles
            cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7), // maxSameTouchAreaCount
            cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8), // indexPop
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // indexPopAttachData
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // indexPopActivityPic
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // indexPopActivityEvent
            cursor.isNull(offset + 12) ? null : cursor.getInt(offset + 12), // indexPopActivityHour
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // indexActivityIconUrl
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // indexActivityIconPic
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // riskDdeviceNname
            cursor.isNull(offset + 16) ? null : cursor.getInt(offset + 16), // hasApprentice
            cursor.isNull(offset + 17) ? null : cursor.getInt(offset + 17), // finishNoviceTask
            cursor.isNull(offset + 18) ? null : cursor.getInt(offset + 18), // todaySign
            cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19), // gotoInvitationPic
            cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20), // gotoSignPic
            cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21), // gotoTaskCenterPic
            cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22), // weixinPayAppid
            cursor.isNull(offset + 23) ? null : cursor.getInt(offset + 23), // readGoldPercent
            cursor.isNull(offset + 24) ? null : cursor.getInt(offset + 24) // videoGoldPercent
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, DeviceInfoBean entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setLevel(cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1));
        entity.setNewsActivity(cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2));
        entity.setNewsMessage(cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3));
        entity.setNewsArticle(cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4));
        entity.setReadGoldCircles(cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5));
        entity.setVideoGoldCircles(cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6));
        entity.setMaxSameTouchAreaCount(cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7));
        entity.setIndexPop(cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8));
        entity.setIndexPopAttachData(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setIndexPopActivityPic(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setIndexPopActivityEvent(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setIndexPopActivityHour(cursor.isNull(offset + 12) ? null : cursor.getInt(offset + 12));
        entity.setIndexActivityIconUrl(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setIndexActivityIconPic(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setRiskDdeviceNname(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setHasApprentice(cursor.isNull(offset + 16) ? null : cursor.getInt(offset + 16));
        entity.setFinishNoviceTask(cursor.isNull(offset + 17) ? null : cursor.getInt(offset + 17));
        entity.setTodaySign(cursor.isNull(offset + 18) ? null : cursor.getInt(offset + 18));
        entity.setGotoInvitationPic(cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19));
        entity.setGotoSignPic(cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20));
        entity.setGotoTaskCenterPic(cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21));
        entity.setWeixinPayAppid(cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22));
        entity.setReadGoldPercent(cursor.isNull(offset + 23) ? null : cursor.getInt(offset + 23));
        entity.setVideoGoldPercent(cursor.isNull(offset + 24) ? null : cursor.getInt(offset + 24));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(DeviceInfoBean entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(DeviceInfoBean entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(DeviceInfoBean entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}

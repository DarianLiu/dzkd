package com.dzkandian.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.dzkandian.storage.bean.news.NewsRecordBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "RECORD_NEWS".
*/
public class NewsRecordBeanDao extends AbstractDao<NewsRecordBean, Long> {

    public static final String TABLENAME = "RECORD_NEWS";

    /**
     * Properties of entity NewsRecordBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property AId = new Property(1, String.class, "aId", false, "A_ID");
        public final static Property AType = new Property(2, String.class, "aType", false, "A_TYPE");
        public final static Property AScale = new Property(3, Integer.class, "aScale", false, "A_SCALE");
        public final static Property Ad = new Property(4, String.class, "ad", false, "AD");
        public final static Property No = new Property(5, Integer.class, "no", false, "NO");
        public final static Property Action = new Property(6, Integer.class, "action", false, "ACTION");
    }


    public NewsRecordBeanDao(DaoConfig config) {
        super(config);
    }
    
    public NewsRecordBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"RECORD_NEWS\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"A_ID\" TEXT," + // 1: aId
                "\"A_TYPE\" TEXT," + // 2: aType
                "\"A_SCALE\" INTEGER," + // 3: aScale
                "\"AD\" TEXT," + // 4: ad
                "\"NO\" INTEGER," + // 5: no
                "\"ACTION\" INTEGER);"); // 6: action
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"RECORD_NEWS\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, NewsRecordBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String aId = entity.getAId();
        if (aId != null) {
            stmt.bindString(2, aId);
        }
 
        String aType = entity.getAType();
        if (aType != null) {
            stmt.bindString(3, aType);
        }
 
        Integer aScale = entity.getAScale();
        if (aScale != null) {
            stmt.bindLong(4, aScale);
        }
 
        String ad = entity.getAd();
        if (ad != null) {
            stmt.bindString(5, ad);
        }
 
        Integer no = entity.getNo();
        if (no != null) {
            stmt.bindLong(6, no);
        }
 
        Integer action = entity.getAction();
        if (action != null) {
            stmt.bindLong(7, action);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, NewsRecordBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String aId = entity.getAId();
        if (aId != null) {
            stmt.bindString(2, aId);
        }
 
        String aType = entity.getAType();
        if (aType != null) {
            stmt.bindString(3, aType);
        }
 
        Integer aScale = entity.getAScale();
        if (aScale != null) {
            stmt.bindLong(4, aScale);
        }
 
        String ad = entity.getAd();
        if (ad != null) {
            stmt.bindString(5, ad);
        }
 
        Integer no = entity.getNo();
        if (no != null) {
            stmt.bindLong(6, no);
        }
 
        Integer action = entity.getAction();
        if (action != null) {
            stmt.bindLong(7, action);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public NewsRecordBean readEntity(Cursor cursor, int offset) {
        NewsRecordBean entity = new NewsRecordBean( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // aId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // aType
            cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3), // aScale
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // ad
            cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5), // no
            cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6) // action
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, NewsRecordBean entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setAId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setAType(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setAScale(cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3));
        entity.setAd(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setNo(cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5));
        entity.setAction(cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(NewsRecordBean entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(NewsRecordBean entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(NewsRecordBean entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}

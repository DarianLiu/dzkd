package com.dzkandian.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.dzkandian.storage.bean.video.VideoBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "VIDEO_BEAN".
*/
public class VideoBeanDao extends AbstractDao<VideoBean, Long> {

    public static final String TABLENAME = "VIDEO_BEAN";

    /**
     * Properties of entity VideoBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property ID = new Property(0, Long.class, "ID", true, "_id");
        public final static Property VideoId = new Property(1, String.class, "videoId", false, "VIDEO_ID");
        public final static Property WebUrl = new Property(2, String.class, "webUrl", false, "WEB_URL");
        public final static Property Source = new Property(3, String.class, "source", false, "SOURCE");
        public final static Property Title = new Property(4, String.class, "title", false, "TITLE");
        public final static Property UpdateTime = new Property(5, String.class, "updateTime", false, "UPDATE_TIME");
        public final static Property Avatar = new Property(6, String.class, "avatar", false, "AVATAR");
        public final static Property Url = new Property(7, String.class, "url", false, "URL");
        public final static Property Duration = new Property(8, String.class, "duration", false, "DURATION");
        public final static Property PlaybackCount = new Property(9, String.class, "playbackCount", false, "PLAYBACK_COUNT");
        public final static Property ThumbUrl = new Property(10, String.class, "thumbUrl", false, "THUMB_URL");
        public final static Property Type = new Property(11, String.class, "type", false, "TYPE");
        public final static Property AdType = new Property(12, int.class, "adType", false, "AD_TYPE");
        public final static Property CanShare = new Property(13, String.class, "canShare", false, "CAN_SHARE");
        public final static Property Describe = new Property(14, String.class, "describe", false, "DESCRIBE");
        public final static Property IsGDTAD = new Property(15, boolean.class, "isGDTAD", false, "IS_GDTAD");
        public final static Property Width = new Property(16, String.class, "width", false, "WIDTH");
        public final static Property Height = new Property(17, String.class, "height", false, "HEIGHT");
    }


    public VideoBeanDao(DaoConfig config) {
        super(config);
    }
    
    public VideoBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"VIDEO_BEAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: ID
                "\"VIDEO_ID\" TEXT," + // 1: videoId
                "\"WEB_URL\" TEXT," + // 2: webUrl
                "\"SOURCE\" TEXT," + // 3: source
                "\"TITLE\" TEXT," + // 4: title
                "\"UPDATE_TIME\" TEXT," + // 5: updateTime
                "\"AVATAR\" TEXT," + // 6: avatar
                "\"URL\" TEXT," + // 7: url
                "\"DURATION\" TEXT," + // 8: duration
                "\"PLAYBACK_COUNT\" TEXT," + // 9: playbackCount
                "\"THUMB_URL\" TEXT," + // 10: thumbUrl
                "\"TYPE\" TEXT," + // 11: type
                "\"AD_TYPE\" INTEGER NOT NULL ," + // 12: adType
                "\"CAN_SHARE\" TEXT," + // 13: canShare
                "\"DESCRIBE\" TEXT," + // 14: describe
                "\"IS_GDTAD\" INTEGER NOT NULL ," + // 15: isGDTAD
                "\"WIDTH\" TEXT," + // 16: width
                "\"HEIGHT\" TEXT);"); // 17: height
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"VIDEO_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, VideoBean entity) {
        stmt.clearBindings();
 
        Long ID = entity.getID();
        if (ID != null) {
            stmt.bindLong(1, ID);
        }
 
        String videoId = entity.getVideoId();
        if (videoId != null) {
            stmt.bindString(2, videoId);
        }
 
        String webUrl = entity.getWebUrl();
        if (webUrl != null) {
            stmt.bindString(3, webUrl);
        }
 
        String source = entity.getSource();
        if (source != null) {
            stmt.bindString(4, source);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(5, title);
        }
 
        String updateTime = entity.getUpdateTime();
        if (updateTime != null) {
            stmt.bindString(6, updateTime);
        }
 
        String avatar = entity.getAvatar();
        if (avatar != null) {
            stmt.bindString(7, avatar);
        }
 
        String url = entity.getUrl();
        if (url != null) {
            stmt.bindString(8, url);
        }
 
        String duration = entity.getDuration();
        if (duration != null) {
            stmt.bindString(9, duration);
        }
 
        String playbackCount = entity.getPlaybackCount();
        if (playbackCount != null) {
            stmt.bindString(10, playbackCount);
        }
 
        String thumbUrl = entity.getThumbUrl();
        if (thumbUrl != null) {
            stmt.bindString(11, thumbUrl);
        }
 
        String type = entity.getType();
        if (type != null) {
            stmt.bindString(12, type);
        }
        stmt.bindLong(13, entity.getAdType());
 
        String canShare = entity.getCanShare();
        if (canShare != null) {
            stmt.bindString(14, canShare);
        }
 
        String describe = entity.getDescribe();
        if (describe != null) {
            stmt.bindString(15, describe);
        }
        stmt.bindLong(16, entity.getIsGDTAD() ? 1L: 0L);
 
        String width = entity.getWidth();
        if (width != null) {
            stmt.bindString(17, width);
        }
 
        String height = entity.getHeight();
        if (height != null) {
            stmt.bindString(18, height);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, VideoBean entity) {
        stmt.clearBindings();
 
        Long ID = entity.getID();
        if (ID != null) {
            stmt.bindLong(1, ID);
        }
 
        String videoId = entity.getVideoId();
        if (videoId != null) {
            stmt.bindString(2, videoId);
        }
 
        String webUrl = entity.getWebUrl();
        if (webUrl != null) {
            stmt.bindString(3, webUrl);
        }
 
        String source = entity.getSource();
        if (source != null) {
            stmt.bindString(4, source);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(5, title);
        }
 
        String updateTime = entity.getUpdateTime();
        if (updateTime != null) {
            stmt.bindString(6, updateTime);
        }
 
        String avatar = entity.getAvatar();
        if (avatar != null) {
            stmt.bindString(7, avatar);
        }
 
        String url = entity.getUrl();
        if (url != null) {
            stmt.bindString(8, url);
        }
 
        String duration = entity.getDuration();
        if (duration != null) {
            stmt.bindString(9, duration);
        }
 
        String playbackCount = entity.getPlaybackCount();
        if (playbackCount != null) {
            stmt.bindString(10, playbackCount);
        }
 
        String thumbUrl = entity.getThumbUrl();
        if (thumbUrl != null) {
            stmt.bindString(11, thumbUrl);
        }
 
        String type = entity.getType();
        if (type != null) {
            stmt.bindString(12, type);
        }
        stmt.bindLong(13, entity.getAdType());
 
        String canShare = entity.getCanShare();
        if (canShare != null) {
            stmt.bindString(14, canShare);
        }
 
        String describe = entity.getDescribe();
        if (describe != null) {
            stmt.bindString(15, describe);
        }
        stmt.bindLong(16, entity.getIsGDTAD() ? 1L: 0L);
 
        String width = entity.getWidth();
        if (width != null) {
            stmt.bindString(17, width);
        }
 
        String height = entity.getHeight();
        if (height != null) {
            stmt.bindString(18, height);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public VideoBean readEntity(Cursor cursor, int offset) {
        VideoBean entity = new VideoBean( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // ID
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // videoId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // webUrl
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // source
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // title
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // updateTime
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // avatar
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // url
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // duration
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // playbackCount
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // thumbUrl
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // type
            cursor.getInt(offset + 12), // adType
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // canShare
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // describe
            cursor.getShort(offset + 15) != 0, // isGDTAD
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // width
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17) // height
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, VideoBean entity, int offset) {
        entity.setID(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setVideoId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setWebUrl(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setSource(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setTitle(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setUpdateTime(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setAvatar(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setUrl(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setDuration(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setPlaybackCount(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setThumbUrl(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setType(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setAdType(cursor.getInt(offset + 12));
        entity.setCanShare(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setDescribe(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setIsGDTAD(cursor.getShort(offset + 15) != 0);
        entity.setWidth(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setHeight(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(VideoBean entity, long rowId) {
        entity.setID(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(VideoBean entity) {
        if(entity != null) {
            return entity.getID();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(VideoBean entity) {
        return entity.getID() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
